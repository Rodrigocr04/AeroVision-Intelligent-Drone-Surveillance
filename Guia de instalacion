En el Github se encuentran 2 carpetas. “SinAssets.zip” y “SoloAssets.zip”. El archivo del proyecto era demasiado pesado así que lo tuvimos que subir en 2 carpetas. “SinAssets.zip” contiene todos los archivos y configuraciones de Unity. “SoloAssets.zip” contiene la carpeta de Assets del proyecto de Unity que incluye, scripts, modelos, texturas, etc. Descarguen ambos zip y extraigan los archivos. La carpeta de Assets en “SoloAssets.zip” muevanla a la carpeta de “SinAssets.zip” para tener todo el proyecto junto. 

Para correr los códigos es necesario iniciar primero el código de “deteccion_camara.py” y esperar a que imprima el mensaje que está esperando conexión. Después se corre el archivo “agents.py” y se debe esperar a que imprima el mensaje que está esperando conexión. Este código de “agents.py” lo tienes que correr cada que cierres el juego de unity porque al cerrar el juego también se cierra el código. El de “deteccion_camara.py” no se detiene aunque se cierre el juego. Cada código se debe correr en su propia terminal. Para los códigos de Unity se deben asignar varias referencias en el inspector. En el código dron agent.cs los puntos de interés son las esferas en las puertas, los spawn guardia son las esferas de la caja fuerte, y las zonas son esferas se encuentran debajo del piso en las puertas. Para la el código dron detección se debe asignar las cámaras. En algunos códigos en lugar de referencias del inspector se utiliza referencias por tags que hay que agregar. Hay que verificar que los códigos de Unity y Python tengan los mismos servers y ip para los de detección y para los de agentes. 

Para la parte de visión computacional en una ventana externa de python se debe correr el código “4_yolo_opencv_detector”, verificar que el nombre de la ventana del editor unity sea el mismo que el del código. También, comprobar que sean correctos los paths a los archivos .WEIGHTS y .cfg. Hay 1 de cada uno en la carpeta yolo opencv detector. Y hay 1 de cada uno en la misma carpeta de Scripts que el código “4_yolo_opencv_detector”. Esos archivos son lo mismo solo son copias, cualquiera de estos se pueden usar para correr el modelo. Vienen más scripts de jupyter que sirven para entrenar tu propio modelo Yolo en caso de ser necesario. El link de guía para esa parte es el siguiente: https://www.youtube.com/watch?v=RSXgyDf2ALo
